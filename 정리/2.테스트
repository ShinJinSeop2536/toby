>>스프링의 중요한 가치는 IoC/DI와 테스트 이다.

*IoC/DI : 오브제트의 설계와 생성, 관계, 사용헤 관하 기술*
*태스트 : 코드를 확신할 수 있게 해주고 , 변화에 유연하게 대처 할 수 있는 자신감을 주는 테스트 기술*

UserDaoTest다시보기
---------------------
>1장에서 매 단계를 확인하고 다양한 방법으로 초남감 UserDao 코드의 구조와 설계를 개선했고, 스프링을 적용해서 동작하게 만들었다. 
>코드의 구조와 설계, 적용한 기술이 변경되더라도 그 기능은 처음 만들었던 초남감 UserDao 가능을 수행한다,
>테스트를 통해 확인 할수 없었다면 확신 할 수 없었을 것이다.
>테스트란 코드가 정확히 동작하는지를 확인힌해서 확신할 수 있는 작업이다.

*테스트 -> 설계의 결함이 있는 작업 -> 결함을 제거하는 디버깅 작업 -> 확신을 가진 코드

웹을 톤한DaO 테스트 방법의 문제점
------------------------------

>보통 웹 프로그램에서 사용한는 DAO를 테스트하는 방법은 DAO를 만든 위 바로 테스트하지 않고, 서비스 계층 MVC 프레젠체이션 계층까지 포함한 모든 입출력 기능을 대충이라도 코드로 다 만든다.
>웹 화면을 통해 값을 입력하고, 기능을 수행하고, 결과를 확인하는 방법은 가장 흔히 쓰이는 방법이다.

##단점##
*모든 레이어의 기능을 다 만들고 나서야 태스트 가능*
>테스트를 하는 중에 에러가 나거나 테스트에 실패했다면, 과연 어디에서 문제가 발생했는지를 찾아내야 하는 수고도 필요하다
>UserDao를 테스트 하고 피었는데 다른 계층의 코드와 컴포넌드, 심지어 서버의 설정 상태까지 모두 테스트에 영향을 줄 수 있기 때문에 이런 방식으로 테스트하는 것은 
>번거롭고, 오류가 있을 떄 빠르고 정확하게 대응하기 힘들다.

작은 단위의 테스트
-----------------

>테스트하고자 하는 대상이 명확하다면 그 대상에만 집중해서 테스트하는 것이 바람직하나.
>따라서  테스트는 작은  단위로 쪼개서 집중해서 할 수 있어야 한다.
>관심사의 분리하는 원리가 여기에 적용된다. 데스트의 관심이 다르다면 데스트할 대상을 분리하고 집중해서 접근해야 한다.

> UserDaoTest는 한 가지 관심에 집중할 수 있게  작은 단위로 만들어진 테스트다.
>간단히 IDE나 도스창에서도 테스트 수행이 가능하다. 에러가 나거나 원치 않은 결과가 나온다면, UserDao에 문제가 있는 것이니 원인을 빠르게 찾아낼 수 있다
> 이렇게 작은 단위의 코드드에 다해 테스트를 수행한 것은 *단위 테스트*라고 한다.
> 단위란 크게는 사용자 관리 기능을 모두 통틀어서 하나의 단위로 볼 수도 있고, 작게 보자면 UserDao의 add() 메소드 하나만 가지고 하나의 단위라고 생각할수 있다.
>충분히 하나의 관심에 집중해서 효율적으로 테스트할 만한 범위의 단위라고 보면 된다.
